#!/bin/bash
export MSYS_NO_PATHCONV=1
export DOCKERHOST=${APPLICATION_URL-$(docker run --rm --net=host codenvy/che-ip)}
set -e

SCRIPT_HOME="$(cd "$(dirname "$0")" && pwd)"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage() {
  cat <<-EOF
    
      Usage: $0 [command] [options]
    
      Commands:
    
      up -  Creates the application containers from the built images
            and starts the services based on the docker-compose.yml file.

            You can pass in a list of containers to start.  
            By default all containers will be started.
            
      start - Same as up
      start-dev - Same as up, but starts the dev django (mounts local drives)

      up-bcovrin -  Like "up", runs on the bcovrin network.
      start-bcovrin - Same as up-bcovrin

      up-stn -  Like "up", runs on the Sovrin Test Network (STN).
      start-stn - Same as up-stn

      django - run python manage.py commands, such as loads_schemas and loads_orgs, and shell

      logs - Display the logs from the docker compose run (ctrl-c to exit).

      stop - Stops the services.  This is a non-destructive process.  The volumes and containers
             are not deleted so they will be reused the next time you run start.
    
      down - Brings down the services and removes the volumes (storage) and containers.
      rm - Same as down
    
EOF
  exit 1
}
# -----------------------------------------------------------------------------------------------------------------
# Default Settings:
# -----------------------------------------------------------------------------------------------------------------
DEFAULT_CONTAINERS="wallet-db trustee-agent aries-django"
DEV_CONTAINERS="wallet-db trustee-agent aries-django-dev"
STN_CONTAINERS="wallet-db trustee-agent aries-django"
# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
JQ_EXE=jq

function checkJQPresent () {
  if [ -z $(type -P "$JQ_EXE") ]; then
    echo "The ${JQ_EXE} executable is needed and not on your path."
    echo "Installation instructions can be found here: https://stedolan.github.io/jq/download"
    exit 1
  fi
}

configureEnvironment() {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export ${line//[$'\r\n']}
      fi
    done <.env
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        export ${arg}
        ;;
    esac
  done

  checkJQPresent

  export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:-aries}"

  export RUST_LOG=${RUST_LOG:-warn}
  export RUST_BACKTRACE=${RUST_BACKTRACE:-full}

  # wallet-db
  export POSTGRESQL_DATABASE="ARIES_BASE"
  export POSTGRESQL_USER="DB_USER"
  export POSTGRESQL_PASSWORD="DB_PASSWORD"
  export ENABLE_REALTIME_INDEXING="1"
  export POSTGRESQL_WALLET_HOST="wallet-db"
  export POSTGRESQL_WALLET_PORT="5432"
  export POSTGRESQL_ADMIN_USER="postgres"
  export POSTGRESQL_ADMIN_PASSWORD="mysecretpassword"

  # aries-django
  export DATABASE_ENGINE="postgresql"
  export DATABASE_NAME=${POSTGRESQL_DATABASE}
  export DATABASE_USER=${POSTGRESQL_USER}
  export DATABASE_PASSWORD=${POSTGRESQL_PASSWORD}
  export DEBUG=${DEBUG}
  export DEMO_SITE=${DEMO_SITE-True}
  export DJANGO_SECRET_KEY=wpn1GZrouOryH2FshRrpVHcEhMfMLtmTWMC2K5Vhx8MAi74H5y
  export DJANGO_DEBUG=True
  export DJANGO_LOG_LEVEL=${DJANGO_LOG_LEVEL-INFO}
  export OPTIMIZE_TABLE_ROW_COUNTS=${OPTIMIZE_TABLE_ROW_COUNTS-}
  export SQL_DEBUG=${SQL_DEBUG:-}

  # ledger-related
  if [ -z "${INDY_NETWORK}" ]; then
    export LEDGER_URL=${LEDGER_URL-http://$DOCKERHOST:9000}
    export GENESIS_URL=${GENESIS_URL-$LEDGER_URL/genesis}
    export LEDGER_PROTOCOL_VERSION=${LEDGER_PROTOCOL_VERSION-}
    export DJANGO_SETTINGS=${DJANGO_SETTINGS-docker_settings}
  else
    case "${INDY_NETWORK}" in
    bcovrin-test*)
      export LEDGER_URL=http://test.bcovrin.vonx.io
      export GENESIS_URL=${GENESIS_URL-$LEDGER_URL/genesis}
      export LEDGER_PROTOCOL_VERSION=${LEDGER_PROTOCOL_VERSION-}
      export DJANGO_SETTINGS=bcovrin_settings
      ;;
    bcovrin-greenlight*)
      export LEDGER_URL=http://greenlight.bcovrin.vonx.io
      export GENESIS_URL=${GENESIS_URL-$LEDGER_URL/genesis}
      export LEDGER_PROTOCOL_VERSION=${LEDGER_PROTOCOL_VERSION-}
      export DJANGO_SETTINGS=greenlight_settings
      ;;
    stn-test*)
      export LEDGER_URL=http://test.bcovrin.vonx.io
      export GENESIS_URL=https://raw.githubusercontent.com/sovrin-foundation/sovrin/stable/sovrin/pool_transactions_sandbox_genesis
      export LEDGER_PROTOCOL_VERSION=${LEDGER_PROTOCOL_VERSION-}
      export DJANGO_SETTINGS=stn_settings
      ;;
    *)
      export LEDGER_URL=${LEDGER_URL-http://$DOCKERHOST:9000}
      export GENESIS_URL=${GENESIS_URL-$LEDGER_URL/genesis}
      export LEDGER_PROTOCOL_VERSION=${LEDGER_PROTOCOL_VERSION-}
      export DJANGO_SETTINGS=${DJANGO_SETTINGS-docker_settings}
      ;;
    esac
  fi

  # trustee-agent
  export AGENT_WALLET_NAME=o_anon_solutions_inc812434
  export WALLET_ENCRYPTION_KEY=pass12345
  export WALLET_SEED=000000000000o_anon_solutions_inc
  export WEBHOOK_URL=http://aries-django:8000/agent_cb/1JZCV9DP8ETL9O2Q7T2A
  export AGENT_HTTP_INTERFACE_PORT=8042
  export AGENT_ADMIN_INTERFACE_PORT=8041
  export ADMIN_API_KEY=VMS7YRZHTOKZXYKSZNJC038ES657PZSSJY3KKKZL
  export AGENT_NAME="Anon Solutions Inc"

  export AGENT_ENDPOINT=$(curl http://localhost:4040/api/tunnels | ${JQ_EXE} --raw-output '.tunnels | map(select(.name | contains("trustee-agent"))) | .[0] | .public_url')
  if [ -z "${AGENT_ENDPOINT}" ]; then
    export AGENT_ENDPOINT=http://trustee-agent:${AGENT_HTTP_INTERFACE_PORT}
  fi

  echo "Using ${LEDGER_URL} as ledger and ${AGENT_ENDPOINT} as the agent endpoint."
}

getStartupParams() {
  CONTAINERS=""
  ARGS="--force-recreate"

  for arg in $@; do
    case "$arg" in
    *=*)
      # Skip it
      ;;
    -*)
      ARGS+=" $arg"
      ;;
    *)
      CONTAINERS+=" $arg"
      ;;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEFAULT_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

getStartupParamsDev() {
  CONTAINERS=""
  ARGS="--force-recreate"

  for arg in $@; do
    case "$arg" in
    *=*)
      # Skip it
      ;;
    -*)
      ARGS+=" $arg"
      ;;
    *)
      CONTAINERS+=" $arg"
      ;;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEV_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

getStartupParamsStn() {
  CONTAINERS=""
  ARGS="--force-recreate"

  for arg in $@; do
    case "$arg" in
    *=*)
      # Skip it
      ;;
    -*)
      ARGS+=" $arg"
      ;;
    *)
      CONTAINERS+=" $arg"
      ;;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$STN_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose down -v

  _pattern="^${_projectName}_\|^docker_"
  _volumes=$(docker volume ls -q | grep ${_pattern})

  if [ ! -z "${_volumes}" ]; then
    echo "Removing project volumes ..."
    echo ${_volumes} | xargs docker volume rm
  else
    echo "No project volumes exist."
  fi

  echo "Removing build cache ..."
  rm -Rf ../tob-web/.cache
}

toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
COMMAND=$(toLower ${1})
shift || COMMAND=usage

case "${COMMAND}" in
start|up)
  _startupParams=$(getStartupParams $@)
  configureEnvironment $@
  docker-compose up -d ${_startupParams} 
  docker-compose logs -f
 ;;
start-dev|up-dev)
  _startupParams=$(getStartupParamsDev $@)
  configureEnvironment $@
  export DJANGO_SETTINGS=docker_dev_settings
  export WEBHOOK_URL=http://aries-django-dev:8000/agent_cb/1JZCV9DP8ETL9O2Q7T2A
  docker-compose up -d ${_startupParams} 
  docker-compose logs -f
 ;;
start-bcovrin|up-bcovrin)
  _startupParams=$(getStartupParams $@)
  export INDY_NETWORK=bcovrin-test
  configureEnvironment $@
  docker-compose up -d ${_startupParams} 
  docker-compose logs -f
 ;;
start-stn|up-stn)
  _startupParams=$(getStartupParamsStn $@)
  export INDY_NETWORK=stn-test
  configureEnvironment $@
  docker-compose up -d ${_startupParams} 
  docker-compose logs -f
 ;;
logs)
  configureEnvironment $@
  docker-compose logs -f
  ;;
stop)
  configureEnvironment
  docker-compose stop 
  ;;
rm|down)
  configureEnvironment
  deleteVolumes
  ;;
shell)
  _startupParams=$(getStartupParams $@)
  configureEnvironment $@
  docker-compose run aries-django bash
  ;;
django)
  _startupParams=$(getStartupParams $@)
  configureEnvironment $@
  docker-compose run -w /home/aries/aries_community_demo/aries_community_demo aries-django python manage.py $@
  ;;
*)
  usage
  ;;
esac

popd >/dev/null
